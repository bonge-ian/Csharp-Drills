// <auto-generated />
using System;
using EFHotel.Data.EFStructures;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFHotel.Data.Migrations
{
    [DbContext(typeof(EFHotelContext))]
    partial class EFHotelContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("EFHotel.Models.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("EFHotel.Models.HotelSpecial", b =>
                {
                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialId")
                        .HasColumnType("int");

                    b.HasKey("HotelId", "SpecialId");

                    b.HasIndex("SpecialId");

                    b.ToTable("HotelSpecial");
                });

            modelBuilder.Entity("EFHotel.Models.RoomPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("RoomTypeId")
                        .IsUnique();

                    b.ToTable("RoomPrices");
                });

            modelBuilder.Entity("EFHotel.Models.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("MEDIUMTEXT");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAccessibleToDisabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<uint>("Rooms")
                        .HasColumnType("INT UNSIGNED");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("RoomTypes");
                });

            modelBuilder.Entity("EFHotel.Models.Special", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Specials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 3, 16, 18, 40, 39, 67, DateTimeKind.Local).AddTicks(9918),
                            Name = "Spa",
                            UpdatedAt = new DateTime(2022, 3, 16, 18, 40, 39, 67, DateTimeKind.Local).AddTicks(9928)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 3, 16, 18, 40, 39, 67, DateTimeKind.Local).AddTicks(9935),
                            Name = "Sauna",
                            UpdatedAt = new DateTime(2022, 3, 16, 18, 40, 39, 67, DateTimeKind.Local).AddTicks(9936)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 3, 16, 18, 40, 39, 67, DateTimeKind.Local).AddTicks(9937),
                            Name = "Dog friendly",
                            UpdatedAt = new DateTime(2022, 3, 16, 18, 40, 39, 67, DateTimeKind.Local).AddTicks(9938)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 3, 16, 18, 40, 39, 67, DateTimeKind.Local).AddTicks(9939),
                            Name = "Indoor pool",
                            UpdatedAt = new DateTime(2022, 3, 16, 18, 40, 39, 67, DateTimeKind.Local).AddTicks(9940)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2022, 3, 16, 18, 40, 39, 67, DateTimeKind.Local).AddTicks(9941),
                            Name = "Outdoor pool",
                            UpdatedAt = new DateTime(2022, 3, 16, 18, 40, 39, 67, DateTimeKind.Local).AddTicks(9941)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2022, 3, 16, 18, 40, 39, 67, DateTimeKind.Local).AddTicks(9945),
                            Name = "Bike rental",
                            UpdatedAt = new DateTime(2022, 3, 16, 18, 40, 39, 67, DateTimeKind.Local).AddTicks(9945)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2022, 3, 16, 18, 40, 39, 67, DateTimeKind.Local).AddTicks(9947),
                            Name = "eCar charging station",
                            UpdatedAt = new DateTime(2022, 3, 16, 18, 40, 39, 67, DateTimeKind.Local).AddTicks(9947)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2022, 3, 16, 18, 40, 39, 67, DateTimeKind.Local).AddTicks(9948),
                            Name = "Vegetarian cuisine",
                            UpdatedAt = new DateTime(2022, 3, 16, 18, 40, 39, 67, DateTimeKind.Local).AddTicks(9949)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2022, 3, 16, 18, 40, 39, 67, DateTimeKind.Local).AddTicks(9950),
                            Name = "Organic food",
                            UpdatedAt = new DateTime(2022, 3, 16, 18, 40, 39, 67, DateTimeKind.Local).AddTicks(9951)
                        });
                });

            modelBuilder.Entity("EFHotel.Models.Hotel", b =>
                {
                    b.OwnsOne("EFHotel.Models.Owned.Address", "Address", b1 =>
                        {
                            b1.Property<int>("HotelId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("CountyCode")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("varchar(3)");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("longtext");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("HotelId");

                            b1.ToTable("Hotels");

                            b1.WithOwner()
                                .HasForeignKey("HotelId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("EFHotel.Models.HotelSpecial", b =>
                {
                    b.HasOne("EFHotel.Models.Hotel", "Hotel")
                        .WithMany("HotelSpecials")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFHotel.Models.Special", "Special")
                        .WithMany("HotelSpecials")
                        .HasForeignKey("SpecialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("Special");
                });

            modelBuilder.Entity("EFHotel.Models.RoomPrice", b =>
                {
                    b.HasOne("EFHotel.Models.RoomType", "RoomType")
                        .WithOne("Price")
                        .HasForeignKey("EFHotel.Models.RoomPrice", "RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("EFHotel.Models.RoomType", b =>
                {
                    b.HasOne("EFHotel.Models.Hotel", "Hotel")
                        .WithMany("RoomTypes")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("EFHotel.Models.Hotel", b =>
                {
                    b.Navigation("HotelSpecials");

                    b.Navigation("RoomTypes");
                });

            modelBuilder.Entity("EFHotel.Models.RoomType", b =>
                {
                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("EFHotel.Models.Special", b =>
                {
                    b.Navigation("HotelSpecials");
                });
#pragma warning restore 612, 618
        }
    }
}
